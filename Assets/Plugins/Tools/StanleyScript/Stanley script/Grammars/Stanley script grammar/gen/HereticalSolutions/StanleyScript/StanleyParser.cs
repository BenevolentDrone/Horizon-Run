//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/Lorem ipsum/Repositories/Unity/VOLMI/Shaken realm/Assets/Plugins/Tools/StanleyScript/Stanley script/Grammars/Stanley script grammar/StanleyParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace HereticalSolutions.StanleyScript {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class StanleyParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		HAD_BEEN_GREATER=1, HAD_BEEN_LESS=2, HAD_BEEN_AT_LEAST=3, HAD_BEEN_AT_MOST=4, 
		BECAME_GREATER=5, BECAME_LESS=6, BECAME_AT_LEAST=7, BECAME_AT_MOST=8, 
		THIS_WAS_REPEATED=9, THIS_IS_HOW=10, WAS_GREATER=11, WAS_LESS=12, WAS_AT_LEAST=13, 
		WAS_AT_MOST=14, IT_WAS_EXPECTED=15, AS_LONG_AS=16, WAS_INSERTED=17, WAS_COMBINED=18, 
		WAS_COUNTED=19, WAS_CLEARED=20, WAS_REMOVED=21, WAS_LOADED=22, WAS_ADDED=23, 
		WAS_NOT=24, HAS_HAPPENED=25, HAD_INSERTED=26, HAD_COMBINED=27, HAD_COUNTED=28, 
		HAD_CLEARED=29, HAD_REMOVED=30, HAD_ADDED=31, HAD_BEEN=32, FOR_EACH=33, 
		THERE_WAS=34, OTHERWISE_IF=35, ELSE_IF=36, BECAME_EMPTY=37, AT_POSITION=38, 
		TYPE_PROGRAM=39, TYPE_REAL_NUMBER=40, TYPE_NUMBER=41, TYPE_OBJECT=42, 
		TYPE_ACTION=43, TYPE_EVENT=44, TYPE_LIST=45, TYPE_TEXT=46, TYPE_FACT=47, 
		MILLISECONDS=48, SECONDS=49, MINUTES=50, TIMES=51, TIME=52, FIRST=53, 
		LAST=54, PROGRAM=55, VALUE=56, COUNT=57, THIS=58, OTHERWISE=59, EXECUTED=60, 
		INSERTED=61, HAPPENED=62, HANDLED=63, COUNTED=64, CLEARED=65, REMOVED=66, 
		PASSED=67, CALLED=68, BECAME=69, ADDED=70, WHILE=71, ELSE=72, BEEN=73, 
		ONCE=74, DONE=75, END=76, UNTIL=77, THAT=78, AND=79, FOR=80, IF=81, WITH=82, 
		INTO=83, FROM=84, TO=85, OF=86, IN=87, ON=88, AT=89, BY=90, THE=91, AN=92, 
		A=93, WAS=94, HAD=95, HAS=96, POSSESSIVE=97, APOSTROPHE=98, COLON=99, 
		COMMA=100, LPAREN=101, RPAREN=102, LBRACKET=103, RBRACKET=104, GREATER_THAN_OR_EQUAL=105, 
		LESS_THAN_OR_EQUAL=106, NOT_EQUAL=107, GREATER_THAN=108, LESS_THAN=109, 
		EQUAL=110, PLUS=111, MINUS=112, MULTIPLY=113, DIVIDE=114, POWER=115, MOD=116, 
		REAL_NUMBER=117, NUMBER=118, STRING=119, BOOLEAN=120, VERB=121, IDENTIFIER=122, 
		DOT=123, COMMENT=124, WS=125;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_declarationStatement = 2, RULE_actionStatement = 3, 
		RULE_assignmentStatement = 4, RULE_eventHandlerStatement = 5, RULE_delegateHandlerStatement = 6, 
		RULE_assertStatement = 7, RULE_timeStatement = 8, RULE_eventStatement = 9, 
		RULE_loopStatement = 10, RULE_listOperationStatement = 11, RULE_programStatement = 12, 
		RULE_conditionalStatement = 13, RULE_subject = 14, RULE_elseIfClause = 15, 
		RULE_elseClause = 16, RULE_actionArguments = 17, RULE_argumentList = 18, 
		RULE_expression = 19, RULE_condition = 20, RULE_timeExpression = 21, RULE_subjectReference = 22, 
		RULE_listValue = 23, RULE_article = 24, RULE_preposition = 25, RULE_timeUnit = 26, 
		RULE_operation = 27, RULE_comparison = 28, RULE_typeName = 29;
	public static readonly string[] ruleNames = {
		"program", "statement", "declarationStatement", "actionStatement", "assignmentStatement", 
		"eventHandlerStatement", "delegateHandlerStatement", "assertStatement", 
		"timeStatement", "eventStatement", "loopStatement", "listOperationStatement", 
		"programStatement", "conditionalStatement", "subject", "elseIfClause", 
		"elseClause", "actionArguments", "argumentList", "expression", "condition", 
		"timeExpression", "subjectReference", "listValue", "article", "preposition", 
		"timeUnit", "operation", "comparison", "typeName"
	};

	private static readonly string[] _LiteralNames = {
		null, "'had been greater than'", "'had been less than'", "'had been at least'", 
		"'had been at most'", "'became greater than'", "'became less than'", "'became at least'", 
		"'became at most'", "'This was repeated'", "'This is how'", "'was greater than'", 
		"'was less than'", "'was at least'", "'was at most'", "'It was expected'", 
		"'As long as'", "'was inserted'", "'was combined'", "'was counted'", "'was cleared'", 
		"'was removed'", "'was loaded'", "'was added'", "'was not'", "'has happened'", 
		"'had inserted'", "'had combined'", "'had counted'", "'had cleared'", 
		"'had removed'", "'had added'", "'had been'", "'For each'", "'There was'", 
		"'Otherwise if'", "'Else if'", "'became empty'", "'at position'", "'program'", 
		"'real number'", "'number'", "'object'", "'action'", "'event'", "'list'", 
		"'text'", "'fact'", "'milliseconds'", "'seconds'", "'minutes'", "'times'", 
		"'Time'", null, null, "'Program'", null, "'count'", "'this'", "'Otherwise'", 
		"'executed'", "'inserted'", "'happened'", "'handled'", "'counted'", "'cleared'", 
		"'removed'", "'passed'", "'called'", "'became'", "'added'", "'While'", 
		"'Else'", "'been'", "'Once'", "'done'", "'End'", "'until'", "'that'", 
		"'and'", "'for'", "'If'", "'with'", "'into'", "'from'", "'to'", "'of'", 
		"'in'", "'on'", "'at'", "'by'", null, "'an'", "'a'", "'was'", "'had'", 
		"'has'", "''s'", "'''", "':'", "','", "'('", "')'", "'['", "']'", "'>='", 
		"'<='", "'!='", "'>'", "'<'", "'=='", "'+'", "'-'", "'*'", "'/'", "'^'", 
		"'%'", null, null, null, null, null, null, "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "HAD_BEEN_GREATER", "HAD_BEEN_LESS", "HAD_BEEN_AT_LEAST", "HAD_BEEN_AT_MOST", 
		"BECAME_GREATER", "BECAME_LESS", "BECAME_AT_LEAST", "BECAME_AT_MOST", 
		"THIS_WAS_REPEATED", "THIS_IS_HOW", "WAS_GREATER", "WAS_LESS", "WAS_AT_LEAST", 
		"WAS_AT_MOST", "IT_WAS_EXPECTED", "AS_LONG_AS", "WAS_INSERTED", "WAS_COMBINED", 
		"WAS_COUNTED", "WAS_CLEARED", "WAS_REMOVED", "WAS_LOADED", "WAS_ADDED", 
		"WAS_NOT", "HAS_HAPPENED", "HAD_INSERTED", "HAD_COMBINED", "HAD_COUNTED", 
		"HAD_CLEARED", "HAD_REMOVED", "HAD_ADDED", "HAD_BEEN", "FOR_EACH", "THERE_WAS", 
		"OTHERWISE_IF", "ELSE_IF", "BECAME_EMPTY", "AT_POSITION", "TYPE_PROGRAM", 
		"TYPE_REAL_NUMBER", "TYPE_NUMBER", "TYPE_OBJECT", "TYPE_ACTION", "TYPE_EVENT", 
		"TYPE_LIST", "TYPE_TEXT", "TYPE_FACT", "MILLISECONDS", "SECONDS", "MINUTES", 
		"TIMES", "TIME", "FIRST", "LAST", "PROGRAM", "VALUE", "COUNT", "THIS", 
		"OTHERWISE", "EXECUTED", "INSERTED", "HAPPENED", "HANDLED", "COUNTED", 
		"CLEARED", "REMOVED", "PASSED", "CALLED", "BECAME", "ADDED", "WHILE", 
		"ELSE", "BEEN", "ONCE", "DONE", "END", "UNTIL", "THAT", "AND", "FOR", 
		"IF", "WITH", "INTO", "FROM", "TO", "OF", "IN", "ON", "AT", "BY", "THE", 
		"AN", "A", "WAS", "HAD", "HAS", "POSSESSIVE", "APOSTROPHE", "COLON", "COMMA", 
		"LPAREN", "RPAREN", "LBRACKET", "RBRACKET", "GREATER_THAN_OR_EQUAL", "LESS_THAN_OR_EQUAL", 
		"NOT_EQUAL", "GREATER_THAN", "LESS_THAN", "EQUAL", "PLUS", "MINUS", "MULTIPLY", 
		"DIVIDE", "POWER", "MOD", "REAL_NUMBER", "NUMBER", "STRING", "BOOLEAN", 
		"VERB", "IDENTIFIER", "DOT", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "StanleyParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static StanleyParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public StanleyParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public StanleyParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 139611614218388992L) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & 1407374884470913L) != 0)) {
				{
				{
				State = 60;
				statement();
				}
				}
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationStatementContext declarationStatement() {
			return GetRuleContext<DeclarationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionStatementContext actionStatement() {
			return GetRuleContext<ActionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentStatementContext assignmentStatement() {
			return GetRuleContext<AssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EventHandlerStatementContext eventHandlerStatement() {
			return GetRuleContext<EventHandlerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DelegateHandlerStatementContext delegateHandlerStatement() {
			return GetRuleContext<DelegateHandlerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssertStatementContext assertStatement() {
			return GetRuleContext<AssertStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TimeStatementContext timeStatement() {
			return GetRuleContext<TimeStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EventStatementContext eventStatement() {
			return GetRuleContext<EventStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopStatementContext loopStatement() {
			return GetRuleContext<LoopStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListOperationStatementContext listOperationStatement() {
			return GetRuleContext<ListOperationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgramStatementContext programStatement() {
			return GetRuleContext<ProgramStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalStatementContext conditionalStatement() {
			return GetRuleContext<ConditionalStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(StanleyParser.COMMENT, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 79;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 66;
				declarationStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 67;
				actionStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 68;
				assignmentStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 69;
				eventHandlerStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 70;
				delegateHandlerStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 71;
				assertStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 72;
				timeStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 73;
				eventStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 74;
				loopStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 75;
				listOperationStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 76;
				programStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 77;
				conditionalStatement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 78;
				Match(COMMENT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THERE_WAS() { return GetToken(StanleyParser.THERE_WAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubjectReferenceContext subjectReference() {
			return GetRuleContext<SubjectReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(StanleyParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArticleContext article() {
			return GetRuleContext<ArticleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALLED() { return GetToken(StanleyParser.CALLED, 0); }
		public DeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.EnterDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.ExitDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationStatementContext declarationStatement() {
		DeclarationStatementContext _localctx = new DeclarationStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_declarationStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			Match(THERE_WAS);
			State = 83;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & 7L) != 0)) {
				{
				State = 82;
				article();
				}
			}

			State = 85;
			typeName();
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CALLED) {
				{
				State = 86;
				Match(CALLED);
				}
			}

			State = 89;
			subjectReference();
			State = 90;
			Match(DOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubjectReferenceContext subjectReference() {
			return GetRuleContext<SubjectReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAS() { return GetToken(StanleyParser.WAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTED() { return GetToken(StanleyParser.EXECUTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(StanleyParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActionArgumentsContext actionArguments() {
			return GetRuleContext<ActionArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAS() { return GetToken(StanleyParser.HAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERB() { return GetToken(StanleyParser.VERB, 0); }
		public ActionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.EnterActionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.ExitActionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionStatementContext actionStatement() {
		ActionStatementContext _localctx = new ActionStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_actionStatement);
		int _la;
		try {
			State = 108;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 92;
				subjectReference();
				State = 93;
				Match(WAS);
				State = 94;
				Match(EXECUTED);
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & 511L) != 0)) {
					{
					State = 95;
					actionArguments();
					}
				}

				State = 98;
				Match(DOT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 100;
				subjectReference();
				State = 101;
				Match(HAS);
				State = 102;
				Match(VERB);
				State = 104;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & 511L) != 0)) {
					{
					State = 103;
					actionArguments();
					}
				}

				State = 106;
				Match(DOT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubjectContext subject() {
			return GetRuleContext<SubjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(StanleyParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAS() { return GetToken(StanleyParser.WAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BECAME() { return GetToken(StanleyParser.BECAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAD() { return GetToken(StanleyParser.HAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEEN() { return GetToken(StanleyParser.BEEN, 0); }
		public AssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.EnterAssignmentStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.ExitAssignmentStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStatementContext assignmentStatement() {
		AssignmentStatementContext _localctx = new AssignmentStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_assignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			subject();
			State = 115;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WAS:
				{
				State = 111;
				Match(WAS);
				}
				break;
			case HAD:
				{
				{
				State = 112;
				Match(HAD);
				State = 113;
				Match(BEEN);
				}
				}
				break;
			case BECAME:
				{
				State = 114;
				Match(BECAME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 117;
			expression(0);
			State = 118;
			Match(DOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventHandlerStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONCE() { return GetToken(StanleyParser.ONCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubjectReferenceContext subjectReference() {
			return GetRuleContext<SubjectReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAPPENED() { return GetToken(StanleyParser.HAPPENED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(StanleyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(StanleyParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(StanleyParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public EventHandlerStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventHandlerStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.EnterEventHandlerStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.ExitEventHandlerStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventHandlerStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventHandlerStatementContext eventHandlerStatement() {
		EventHandlerStatementContext _localctx = new EventHandlerStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_eventHandlerStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			Match(ONCE);
			State = 121;
			subjectReference();
			State = 122;
			Match(HAPPENED);
			State = 123;
			Match(COLON);
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 139611614218388992L) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & 1407374884470913L) != 0)) {
				{
				{
				State = 124;
				statement();
				}
				}
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 130;
			Match(END);
			State = 131;
			Match(DOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelegateHandlerStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS_IS_HOW() { return GetToken(StanleyParser.THIS_IS_HOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubjectReferenceContext subjectReference() {
			return GetRuleContext<SubjectReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAS() { return GetToken(StanleyParser.WAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(StanleyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(StanleyParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(StanleyParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DONE() { return GetToken(StanleyParser.DONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLED() { return GetToken(StanleyParser.HANDLED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public DelegateHandlerStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegateHandlerStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.EnterDelegateHandlerStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.ExitDelegateHandlerStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelegateHandlerStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DelegateHandlerStatementContext delegateHandlerStatement() {
		DelegateHandlerStatementContext _localctx = new DelegateHandlerStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_delegateHandlerStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			Match(THIS_IS_HOW);
			State = 134;
			subjectReference();
			State = 135;
			Match(WAS);
			State = 136;
			_la = TokenStream.LA(1);
			if ( !(_la==HANDLED || _la==DONE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 137;
			Match(COLON);
			State = 141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 139611614218388992L) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & 1407374884470913L) != 0)) {
				{
				{
				State = 138;
				statement();
				}
				}
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 144;
			Match(END);
			State = 145;
			Match(DOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssertStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IT_WAS_EXPECTED() { return GetToken(StanleyParser.IT_WAS_EXPECTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THAT() { return GetToken(StanleyParser.THAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(StanleyParser.DOT, 0); }
		public AssertStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assertStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.EnterAssertStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.ExitAssertStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssertStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssertStatementContext assertStatement() {
		AssertStatementContext _localctx = new AssertStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_assertStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			Match(IT_WAS_EXPECTED);
			State = 148;
			Match(THAT);
			State = 149;
			condition();
			State = 150;
			Match(DOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(StanleyParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSED() { return GetToken(StanleyParser.PASSED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(StanleyParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TimeExpressionContext timeExpression() {
			return GetRuleContext<TimeExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(StanleyParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(StanleyParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubjectReferenceContext subjectReference() {
			return GetRuleContext<SubjectReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAPPENED() { return GetToken(StanleyParser.HAPPENED, 0); }
		public TimeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.EnterTimeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.ExitTimeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeStatementContext timeStatement() {
		TimeStatementContext _localctx = new TimeStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_timeStatement);
		try {
			State = 165;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 152;
				Match(TIME);
				State = 153;
				Match(PASSED);
				State = 154;
				Match(FOR);
				State = 155;
				timeExpression();
				State = 156;
				Match(DOT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 158;
				Match(TIME);
				State = 159;
				Match(PASSED);
				State = 160;
				Match(UNTIL);
				State = 161;
				subjectReference();
				State = 162;
				Match(HAPPENED);
				State = 163;
				Match(DOT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubjectReferenceContext subjectReference() {
			return GetRuleContext<SubjectReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAS_HAPPENED() { return GetToken(StanleyParser.HAS_HAPPENED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(StanleyParser.DOT, 0); }
		public EventStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.EnterEventStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.ExitEventStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventStatementContext eventStatement() {
		EventStatementContext _localctx = new EventStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_eventStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			subjectReference();
			State = 168;
			Match(HAS_HAPPENED);
			State = 169;
			Match(DOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS_WAS_REPEATED() { return GetToken(StanleyParser.THIS_WAS_REPEATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(StanleyParser.TIMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(StanleyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(StanleyParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(StanleyParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_LONG_AS() { return GetToken(StanleyParser.AS_LONG_AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_EACH() { return GetToken(StanleyParser.FOR_EACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(StanleyParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(StanleyParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(StanleyParser.IN, 0); }
		public LoopStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.EnterLoopStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.ExitLoopStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopStatementContext loopStatement() {
		LoopStatementContext _localctx = new LoopStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_loopStatement);
		int _la;
		try {
			State = 209;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case THIS_WAS_REPEATED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 171;
				Match(THIS_WAS_REPEATED);
				State = 172;
				expression(0);
				State = 173;
				Match(TIMES);
				State = 174;
				Match(COLON);
				State = 178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 139611614218388992L) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & 1407374884470913L) != 0)) {
					{
					{
					State = 175;
					statement();
					}
					}
					State = 180;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 181;
				Match(END);
				State = 182;
				Match(DOT);
				}
				break;
			case AS_LONG_AS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 184;
				Match(AS_LONG_AS);
				State = 185;
				condition();
				State = 186;
				Match(COLON);
				State = 190;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 139611614218388992L) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & 1407374884470913L) != 0)) {
					{
					{
					State = 187;
					statement();
					}
					}
					State = 192;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 193;
				Match(END);
				State = 194;
				Match(DOT);
				}
				break;
			case FOR_EACH:
				EnterOuterAlt(_localctx, 3);
				{
				State = 196;
				Match(FOR_EACH);
				State = 197;
				Match(IDENTIFIER);
				State = 198;
				Match(IN);
				State = 199;
				Match(IDENTIFIER);
				State = 200;
				Match(COLON);
				State = 204;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 139611614218388992L) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & 1407374884470913L) != 0)) {
					{
					{
					State = 201;
					statement();
					}
					}
					State = 206;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 207;
				Match(END);
				State = 208;
				Match(DOT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListOperationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(StanleyParser.VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(StanleyParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubjectReferenceContext[] subjectReference() {
			return GetRuleContexts<SubjectReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubjectReferenceContext subjectReference(int i) {
			return GetRuleContext<SubjectReferenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(StanleyParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAS_ADDED() { return GetToken(StanleyParser.WAS_ADDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAD_ADDED() { return GetToken(StanleyParser.HAD_ADDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_POSITION() { return GetToken(StanleyParser.AT_POSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(StanleyParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAS_INSERTED() { return GetToken(StanleyParser.WAS_INSERTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAD_INSERTED() { return GetToken(StanleyParser.HAD_INSERTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(StanleyParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAS_REMOVED() { return GetToken(StanleyParser.WAS_REMOVED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAD_REMOVED() { return GetToken(StanleyParser.HAD_REMOVED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(StanleyParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAS_COMBINED() { return GetToken(StanleyParser.WAS_COMBINED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAD_COMBINED() { return GetToken(StanleyParser.HAD_COMBINED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BECAME_EMPTY() { return GetToken(StanleyParser.BECAME_EMPTY, 0); }
		public ListOperationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listOperationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.EnterListOperationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.ExitListOperationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListOperationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListOperationStatementContext listOperationStatement() {
		ListOperationStatementContext _localctx = new ListOperationStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_listOperationStatement);
		int _la;
		try {
			State = 245;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 211;
				Match(VALUE);
				State = 212;
				expression(0);
				State = 213;
				_la = TokenStream.LA(1);
				if ( !(_la==WAS_ADDED || _la==HAD_ADDED) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 214;
				Match(TO);
				State = 215;
				subjectReference();
				State = 216;
				Match(DOT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 218;
				Match(VALUE);
				State = 219;
				expression(0);
				State = 220;
				_la = TokenStream.LA(1);
				if ( !(_la==WAS_INSERTED || _la==HAD_INSERTED) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 221;
				Match(AT_POSITION);
				State = 222;
				expression(0);
				State = 223;
				Match(IN);
				State = 224;
				subjectReference();
				State = 225;
				Match(DOT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 227;
				Match(VALUE);
				State = 228;
				Match(AT_POSITION);
				State = 229;
				expression(0);
				State = 230;
				_la = TokenStream.LA(1);
				if ( !(_la==WAS_REMOVED || _la==HAD_REMOVED) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 231;
				Match(FROM);
				State = 232;
				subjectReference();
				State = 233;
				Match(DOT);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 235;
				subjectReference();
				State = 236;
				_la = TokenStream.LA(1);
				if ( !(_la==WAS_COMBINED || _la==HAD_COMBINED) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 237;
				Match(WITH);
				State = 238;
				subjectReference();
				State = 239;
				Match(DOT);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 241;
				subjectReference();
				State = 242;
				Match(BECAME_EMPTY);
				State = 243;
				Match(DOT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROGRAM() { return GetToken(StanleyParser.PROGRAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(StanleyParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAS_LOADED() { return GetToken(StanleyParser.WAS_LOADED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubjectReferenceContext subjectReference() {
			return GetRuleContext<SubjectReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(StanleyParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(StanleyParser.FROM, 0); }
		public ProgramStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.EnterProgramStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.ExitProgramStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramStatementContext programStatement() {
		ProgramStatementContext _localctx = new ProgramStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_programStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			Match(PROGRAM);
			State = 249;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 248;
				Match(FROM);
				}
			}

			State = 251;
			Match(STRING);
			State = 252;
			Match(WAS_LOADED);
			State = 253;
			subjectReference();
			State = 254;
			Match(DOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(StanleyParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(StanleyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(StanleyParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(StanleyParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfClauseContext[] elseIfClause() {
			return GetRuleContexts<ElseIfClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfClauseContext elseIfClause(int i) {
			return GetRuleContext<ElseIfClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseClauseContext elseClause() {
			return GetRuleContext<ElseClauseContext>(0);
		}
		public ConditionalStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.EnterConditionalStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.ExitConditionalStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalStatementContext conditionalStatement() {
		ConditionalStatementContext _localctx = new ConditionalStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_conditionalStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			Match(IF);
			State = 257;
			condition();
			State = 258;
			Match(COLON);
			State = 262;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 139611614218388992L) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & 1407374884470913L) != 0)) {
				{
				{
				State = 259;
				statement();
				}
				}
				State = 264;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 268;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OTHERWISE_IF || _la==ELSE_IF) {
				{
				{
				State = 265;
				elseIfClause();
				}
				}
				State = 270;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 272;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OTHERWISE || _la==ELSE) {
				{
				State = 271;
				elseClause();
				}
			}

			State = 274;
			Match(END);
			State = 275;
			Match(DOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubjectReferenceContext subjectReference() {
			return GetRuleContext<SubjectReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListValueContext listValue() {
			return GetRuleContext<ListValueContext>(0);
		}
		public SubjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subject; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.EnterSubject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.ExitSubject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubjectContext subject() {
		SubjectContext _localctx = new SubjectContext(Context, State);
		EnterRule(_localctx, 28, RULE_subject);
		try {
			State = 279;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 277;
				subjectReference();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 278;
				listValue();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(StanleyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE_IF() { return GetToken(StanleyParser.ELSE_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHERWISE_IF() { return GetToken(StanleyParser.OTHERWISE_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ElseIfClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.EnterElseIfClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.ExitElseIfClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfClauseContext elseIfClause() {
		ElseIfClauseContext _localctx = new ElseIfClauseContext(Context, State);
		EnterRule(_localctx, 30, RULE_elseIfClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			_la = TokenStream.LA(1);
			if ( !(_la==OTHERWISE_IF || _la==ELSE_IF) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 282;
			condition();
			State = 283;
			Match(COLON);
			State = 287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 139611614218388992L) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & 1407374884470913L) != 0)) {
				{
				{
				State = 284;
				statement();
				}
				}
				State = 289;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(StanleyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(StanleyParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHERWISE() { return GetToken(StanleyParser.OTHERWISE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ElseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.EnterElseClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.ExitElseClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseClauseContext elseClause() {
		ElseClauseContext _localctx = new ElseClauseContext(Context, State);
		EnterRule(_localctx, 32, RULE_elseClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290;
			_la = TokenStream.LA(1);
			if ( !(_la==OTHERWISE || _la==ELSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 291;
			Match(COLON);
			State = 295;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 139611614218388992L) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & 1407374884470913L) != 0)) {
				{
				{
				State = 292;
				statement();
				}
				}
				State = 297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrepositionContext[] preposition() {
			return GetRuleContexts<PrepositionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrepositionContext preposition(int i) {
			return GetRuleContext<PrepositionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext[] argumentList() {
			return GetRuleContexts<ArgumentListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList(int i) {
			return GetRuleContext<ArgumentListContext>(i);
		}
		public ActionArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.EnterActionArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.ExitActionArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionArgumentsContext actionArguments() {
		ActionArgumentsContext _localctx = new ActionArgumentsContext(Context, State);
		EnterRule(_localctx, 34, RULE_actionArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 298;
				preposition();
				State = 299;
				argumentList();
				}
				}
				State = 303;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & 511L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(StanleyParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(StanleyParser.AND, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 36, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305;
			expression(0);
			State = 310;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 306;
				Match(AND);
				State = 307;
				expression(0);
				}
				}
				State = 312;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_NUMBER() { return GetToken(StanleyParser.REAL_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(StanleyParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(StanleyParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT() { return GetToken(StanleyParser.COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(StanleyParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubjectReferenceContext subjectReference() {
			return GetRuleContext<SubjectReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListValueContext listValue() {
			return GetRuleContext<ListValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(StanleyParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(StanleyParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 38;
		EnterRecursionRule(_localctx, 38, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 326;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 314;
				Match(REAL_NUMBER);
				}
				break;
			case 2:
				{
				State = 315;
				Match(NUMBER);
				}
				break;
			case 3:
				{
				State = 316;
				Match(STRING);
				}
				break;
			case 4:
				{
				State = 317;
				Match(COUNT);
				State = 318;
				Match(FROM);
				State = 319;
				subjectReference();
				}
				break;
			case 5:
				{
				State = 320;
				subjectReference();
				}
				break;
			case 6:
				{
				State = 321;
				listValue();
				}
				break;
			case 7:
				{
				State = 322;
				Match(LPAREN);
				State = 323;
				expression(0);
				State = 324;
				Match(RPAREN);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 334;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 328;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 329;
					operation();
					State = 330;
					expression(3);
					}
					} 
				}
				State = 336;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 40, RULE_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337;
			expression(0);
			State = 339;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4311775742L) != 0) || _la==BECAME || _la==WAS) {
				{
				State = 338;
				comparison();
				}
			}

			State = 341;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(StanleyParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TimeUnitContext timeUnit() {
			return GetRuleContext<TimeUnitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(StanleyParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TimeExpressionContext timeExpression() {
			return GetRuleContext<TimeExpressionContext>(0);
		}
		public TimeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.EnterTimeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.ExitTimeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeExpressionContext timeExpression() {
		TimeExpressionContext _localctx = new TimeExpressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_timeExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 343;
			Match(NUMBER);
			State = 344;
			timeUnit();
			State = 347;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AND) {
				{
				State = 345;
				Match(AND);
				State = 346;
				timeExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubjectReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(StanleyParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(StanleyParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArticleContext article() {
			return GetRuleContext<ArticleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] POSSESSIVE() { return GetTokens(StanleyParser.POSSESSIVE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSSESSIVE(int i) {
			return GetToken(StanleyParser.POSSESSIVE, i);
		}
		public SubjectReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subjectReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.EnterSubjectReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.ExitSubjectReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubjectReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubjectReferenceContext subjectReference() {
		SubjectReferenceContext _localctx = new SubjectReferenceContext(Context, State);
		EnterRule(_localctx, 44, RULE_subjectReference);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 350;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & 7L) != 0)) {
				{
				State = 349;
				article();
				}
			}

			State = 352;
			Match(IDENTIFIER);
			State = 357;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 353;
					Match(POSSESSIVE);
					State = 354;
					Match(IDENTIFIER);
					}
					} 
				}
				State = 359;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(StanleyParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(StanleyParser.VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(StanleyParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubjectReferenceContext subjectReference() {
			return GetRuleContext<SubjectReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArticleContext article() {
			return GetRuleContext<ArticleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(StanleyParser.LAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_POSITION() { return GetToken(StanleyParser.AT_POSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ListValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.EnterListValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.ExitListValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListValueContext listValue() {
		ListValueContext _localctx = new ListValueContext(Context, State);
		EnterRule(_localctx, 46, RULE_listValue);
		int _la;
		try {
			State = 383;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 361;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & 7L) != 0)) {
					{
					State = 360;
					article();
					}
				}

				State = 363;
				Match(FIRST);
				State = 364;
				Match(VALUE);
				State = 365;
				Match(FROM);
				State = 366;
				subjectReference();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 368;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & 7L) != 0)) {
					{
					State = 367;
					article();
					}
				}

				State = 370;
				Match(LAST);
				State = 371;
				Match(VALUE);
				State = 372;
				Match(FROM);
				State = 373;
				subjectReference();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 375;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & 7L) != 0)) {
					{
					State = 374;
					article();
					}
				}

				State = 377;
				Match(VALUE);
				State = 378;
				Match(AT_POSITION);
				State = 379;
				expression(0);
				State = 380;
				Match(FROM);
				State = 381;
				subjectReference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArticleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THE() { return GetToken(StanleyParser.THE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AN() { return GetToken(StanleyParser.AN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A() { return GetToken(StanleyParser.A, 0); }
		public ArticleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_article; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.EnterArticle(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.ExitArticle(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArticle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArticleContext article() {
		ArticleContext _localctx = new ArticleContext(Context, State);
		EnterRule(_localctx, 48, RULE_article);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 385;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & 7L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrepositionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(StanleyParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(StanleyParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(StanleyParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(StanleyParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(StanleyParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(StanleyParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(StanleyParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(StanleyParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(StanleyParser.BY, 0); }
		public PrepositionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preposition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.EnterPreposition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.ExitPreposition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreposition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrepositionContext preposition() {
		PrepositionContext _localctx = new PrepositionContext(Context, State);
		EnterRule(_localctx, 50, RULE_preposition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & 511L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MILLISECONDS() { return GetToken(StanleyParser.MILLISECONDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDS() { return GetToken(StanleyParser.SECONDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTES() { return GetToken(StanleyParser.MINUTES, 0); }
		public TimeUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.EnterTimeUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.ExitTimeUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeUnitContext timeUnit() {
		TimeUnitContext _localctx = new TimeUnitContext(Context, State);
		EnterRule(_localctx, 52, RULE_timeUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1970324836974592L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN_OR_EQUAL() { return GetToken(StanleyParser.GREATER_THAN_OR_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_THAN_OR_EQUAL() { return GetToken(StanleyParser.LESS_THAN_OR_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUAL() { return GetToken(StanleyParser.NOT_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN() { return GetToken(StanleyParser.GREATER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_THAN() { return GetToken(StanleyParser.LESS_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(StanleyParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(StanleyParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(StanleyParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(StanleyParser.MULTIPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(StanleyParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(StanleyParser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(StanleyParser.MOD, 0); }
		public OperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.EnterOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.ExitOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationContext operation() {
		OperationContext _localctx = new OperationContext(Context, State);
		EnterRule(_localctx, 54, RULE_operation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & 4095L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAD_BEEN_GREATER() { return GetToken(StanleyParser.HAD_BEEN_GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAD_BEEN_LESS() { return GetToken(StanleyParser.HAD_BEEN_LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAD_BEEN_AT_LEAST() { return GetToken(StanleyParser.HAD_BEEN_AT_LEAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAD_BEEN_AT_MOST() { return GetToken(StanleyParser.HAD_BEEN_AT_MOST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BECAME_GREATER() { return GetToken(StanleyParser.BECAME_GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BECAME_LESS() { return GetToken(StanleyParser.BECAME_LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BECAME_AT_LEAST() { return GetToken(StanleyParser.BECAME_AT_LEAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BECAME_AT_MOST() { return GetToken(StanleyParser.BECAME_AT_MOST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAS_GREATER() { return GetToken(StanleyParser.WAS_GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAS_LESS() { return GetToken(StanleyParser.WAS_LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAS_AT_LEAST() { return GetToken(StanleyParser.WAS_AT_LEAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAS_AT_MOST() { return GetToken(StanleyParser.WAS_AT_MOST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAS_NOT() { return GetToken(StanleyParser.WAS_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAD_BEEN() { return GetToken(StanleyParser.HAD_BEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BECAME() { return GetToken(StanleyParser.BECAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAS() { return GetToken(StanleyParser.WAS, 0); }
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.EnterComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.ExitComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(Context, State);
		EnterRule(_localctx, 56, RULE_comparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 393;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4311775742L) != 0) || _la==BECAME || _la==WAS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_PROGRAM() { return GetToken(StanleyParser.TYPE_PROGRAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_REAL_NUMBER() { return GetToken(StanleyParser.TYPE_REAL_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_NUMBER() { return GetToken(StanleyParser.TYPE_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_OBJECT() { return GetToken(StanleyParser.TYPE_OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_ACTION() { return GetToken(StanleyParser.TYPE_ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_EVENT() { return GetToken(StanleyParser.TYPE_EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_LIST() { return GetToken(StanleyParser.TYPE_LIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_TEXT() { return GetToken(StanleyParser.TYPE_TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_FACT() { return GetToken(StanleyParser.TYPE_FACT, 0); }
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStanleyParserListener typedListener = listener as IStanleyParserListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IStanleyParserVisitor<TResult> typedVisitor = visitor as IStanleyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 58, RULE_typeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 280925220896768L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 19: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,125,398,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,1,0,5,0,62,8,0,10,0,12,0,65,9,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,3,1,80,8,1,1,2,1,2,3,2,84,8,2,1,2,1,2,3,2,88,8,
		2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,3,3,97,8,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,105,
		8,3,1,3,1,3,3,3,109,8,3,1,4,1,4,1,4,1,4,1,4,3,4,116,8,4,1,4,1,4,1,4,1,
		5,1,5,1,5,1,5,1,5,5,5,126,8,5,10,5,12,5,129,9,5,1,5,1,5,1,5,1,6,1,6,1,
		6,1,6,1,6,1,6,5,6,140,8,6,10,6,12,6,143,9,6,1,6,1,6,1,6,1,7,1,7,1,7,1,
		7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,166,8,8,
		1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,5,10,177,8,10,10,10,12,10,180,
		9,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,5,10,189,8,10,10,10,12,10,192,
		9,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,5,10,203,8,10,10,10,
		12,10,206,9,10,1,10,1,10,3,10,210,8,10,1,11,1,11,1,11,1,11,1,11,1,11,1,
		11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
		11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,
		11,246,8,11,1,12,1,12,3,12,250,8,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,
		1,13,1,13,5,13,261,8,13,10,13,12,13,264,9,13,1,13,5,13,267,8,13,10,13,
		12,13,270,9,13,1,13,3,13,273,8,13,1,13,1,13,1,13,1,14,1,14,3,14,280,8,
		14,1,15,1,15,1,15,1,15,5,15,286,8,15,10,15,12,15,289,9,15,1,16,1,16,1,
		16,5,16,294,8,16,10,16,12,16,297,9,16,1,17,1,17,1,17,4,17,302,8,17,11,
		17,12,17,303,1,18,1,18,1,18,5,18,309,8,18,10,18,12,18,312,9,18,1,19,1,
		19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,327,8,19,
		1,19,1,19,1,19,1,19,5,19,333,8,19,10,19,12,19,336,9,19,1,20,1,20,3,20,
		340,8,20,1,20,1,20,1,21,1,21,1,21,1,21,3,21,348,8,21,1,22,3,22,351,8,22,
		1,22,1,22,1,22,5,22,356,8,22,10,22,12,22,359,9,22,1,23,3,23,362,8,23,1,
		23,1,23,1,23,1,23,1,23,3,23,369,8,23,1,23,1,23,1,23,1,23,1,23,3,23,376,
		8,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,384,8,23,1,24,1,24,1,25,1,25,1,
		26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,0,1,38,30,0,2,4,6,8,10,12,14,
		16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,0,13,
		2,0,63,63,75,75,2,0,23,23,31,31,2,0,17,17,26,26,2,0,21,21,30,30,2,0,18,
		18,27,27,1,0,35,36,2,0,59,59,72,72,1,0,91,93,1,0,82,90,1,0,48,50,1,0,105,
		116,6,0,1,8,11,14,24,24,32,32,69,69,94,94,1,0,39,47,424,0,63,1,0,0,0,2,
		79,1,0,0,0,4,81,1,0,0,0,6,108,1,0,0,0,8,110,1,0,0,0,10,120,1,0,0,0,12,
		133,1,0,0,0,14,147,1,0,0,0,16,165,1,0,0,0,18,167,1,0,0,0,20,209,1,0,0,
		0,22,245,1,0,0,0,24,247,1,0,0,0,26,256,1,0,0,0,28,279,1,0,0,0,30,281,1,
		0,0,0,32,290,1,0,0,0,34,301,1,0,0,0,36,305,1,0,0,0,38,326,1,0,0,0,40,337,
		1,0,0,0,42,343,1,0,0,0,44,350,1,0,0,0,46,383,1,0,0,0,48,385,1,0,0,0,50,
		387,1,0,0,0,52,389,1,0,0,0,54,391,1,0,0,0,56,393,1,0,0,0,58,395,1,0,0,
		0,60,62,3,2,1,0,61,60,1,0,0,0,62,65,1,0,0,0,63,61,1,0,0,0,63,64,1,0,0,
		0,64,1,1,0,0,0,65,63,1,0,0,0,66,80,3,4,2,0,67,80,3,6,3,0,68,80,3,8,4,0,
		69,80,3,10,5,0,70,80,3,12,6,0,71,80,3,14,7,0,72,80,3,16,8,0,73,80,3,18,
		9,0,74,80,3,20,10,0,75,80,3,22,11,0,76,80,3,24,12,0,77,80,3,26,13,0,78,
		80,5,124,0,0,79,66,1,0,0,0,79,67,1,0,0,0,79,68,1,0,0,0,79,69,1,0,0,0,79,
		70,1,0,0,0,79,71,1,0,0,0,79,72,1,0,0,0,79,73,1,0,0,0,79,74,1,0,0,0,79,
		75,1,0,0,0,79,76,1,0,0,0,79,77,1,0,0,0,79,78,1,0,0,0,80,3,1,0,0,0,81,83,
		5,34,0,0,82,84,3,48,24,0,83,82,1,0,0,0,83,84,1,0,0,0,84,85,1,0,0,0,85,
		87,3,58,29,0,86,88,5,68,0,0,87,86,1,0,0,0,87,88,1,0,0,0,88,89,1,0,0,0,
		89,90,3,44,22,0,90,91,5,123,0,0,91,5,1,0,0,0,92,93,3,44,22,0,93,94,5,94,
		0,0,94,96,5,60,0,0,95,97,3,34,17,0,96,95,1,0,0,0,96,97,1,0,0,0,97,98,1,
		0,0,0,98,99,5,123,0,0,99,109,1,0,0,0,100,101,3,44,22,0,101,102,5,96,0,
		0,102,104,5,121,0,0,103,105,3,34,17,0,104,103,1,0,0,0,104,105,1,0,0,0,
		105,106,1,0,0,0,106,107,5,123,0,0,107,109,1,0,0,0,108,92,1,0,0,0,108,100,
		1,0,0,0,109,7,1,0,0,0,110,115,3,28,14,0,111,116,5,94,0,0,112,113,5,95,
		0,0,113,116,5,73,0,0,114,116,5,69,0,0,115,111,1,0,0,0,115,112,1,0,0,0,
		115,114,1,0,0,0,116,117,1,0,0,0,117,118,3,38,19,0,118,119,5,123,0,0,119,
		9,1,0,0,0,120,121,5,74,0,0,121,122,3,44,22,0,122,123,5,62,0,0,123,127,
		5,99,0,0,124,126,3,2,1,0,125,124,1,0,0,0,126,129,1,0,0,0,127,125,1,0,0,
		0,127,128,1,0,0,0,128,130,1,0,0,0,129,127,1,0,0,0,130,131,5,76,0,0,131,
		132,5,123,0,0,132,11,1,0,0,0,133,134,5,10,0,0,134,135,3,44,22,0,135,136,
		5,94,0,0,136,137,7,0,0,0,137,141,5,99,0,0,138,140,3,2,1,0,139,138,1,0,
		0,0,140,143,1,0,0,0,141,139,1,0,0,0,141,142,1,0,0,0,142,144,1,0,0,0,143,
		141,1,0,0,0,144,145,5,76,0,0,145,146,5,123,0,0,146,13,1,0,0,0,147,148,
		5,15,0,0,148,149,5,78,0,0,149,150,3,40,20,0,150,151,5,123,0,0,151,15,1,
		0,0,0,152,153,5,52,0,0,153,154,5,67,0,0,154,155,5,80,0,0,155,156,3,42,
		21,0,156,157,5,123,0,0,157,166,1,0,0,0,158,159,5,52,0,0,159,160,5,67,0,
		0,160,161,5,77,0,0,161,162,3,44,22,0,162,163,5,62,0,0,163,164,5,123,0,
		0,164,166,1,0,0,0,165,152,1,0,0,0,165,158,1,0,0,0,166,17,1,0,0,0,167,168,
		3,44,22,0,168,169,5,25,0,0,169,170,5,123,0,0,170,19,1,0,0,0,171,172,5,
		9,0,0,172,173,3,38,19,0,173,174,5,51,0,0,174,178,5,99,0,0,175,177,3,2,
		1,0,176,175,1,0,0,0,177,180,1,0,0,0,178,176,1,0,0,0,178,179,1,0,0,0,179,
		181,1,0,0,0,180,178,1,0,0,0,181,182,5,76,0,0,182,183,5,123,0,0,183,210,
		1,0,0,0,184,185,5,16,0,0,185,186,3,40,20,0,186,190,5,99,0,0,187,189,3,
		2,1,0,188,187,1,0,0,0,189,192,1,0,0,0,190,188,1,0,0,0,190,191,1,0,0,0,
		191,193,1,0,0,0,192,190,1,0,0,0,193,194,5,76,0,0,194,195,5,123,0,0,195,
		210,1,0,0,0,196,197,5,33,0,0,197,198,5,122,0,0,198,199,5,87,0,0,199,200,
		5,122,0,0,200,204,5,99,0,0,201,203,3,2,1,0,202,201,1,0,0,0,203,206,1,0,
		0,0,204,202,1,0,0,0,204,205,1,0,0,0,205,207,1,0,0,0,206,204,1,0,0,0,207,
		208,5,76,0,0,208,210,5,123,0,0,209,171,1,0,0,0,209,184,1,0,0,0,209,196,
		1,0,0,0,210,21,1,0,0,0,211,212,5,56,0,0,212,213,3,38,19,0,213,214,7,1,
		0,0,214,215,5,85,0,0,215,216,3,44,22,0,216,217,5,123,0,0,217,246,1,0,0,
		0,218,219,5,56,0,0,219,220,3,38,19,0,220,221,7,2,0,0,221,222,5,38,0,0,
		222,223,3,38,19,0,223,224,5,87,0,0,224,225,3,44,22,0,225,226,5,123,0,0,
		226,246,1,0,0,0,227,228,5,56,0,0,228,229,5,38,0,0,229,230,3,38,19,0,230,
		231,7,3,0,0,231,232,5,84,0,0,232,233,3,44,22,0,233,234,5,123,0,0,234,246,
		1,0,0,0,235,236,3,44,22,0,236,237,7,4,0,0,237,238,5,82,0,0,238,239,3,44,
		22,0,239,240,5,123,0,0,240,246,1,0,0,0,241,242,3,44,22,0,242,243,5,37,
		0,0,243,244,5,123,0,0,244,246,1,0,0,0,245,211,1,0,0,0,245,218,1,0,0,0,
		245,227,1,0,0,0,245,235,1,0,0,0,245,241,1,0,0,0,246,23,1,0,0,0,247,249,
		5,55,0,0,248,250,5,84,0,0,249,248,1,0,0,0,249,250,1,0,0,0,250,251,1,0,
		0,0,251,252,5,119,0,0,252,253,5,22,0,0,253,254,3,44,22,0,254,255,5,123,
		0,0,255,25,1,0,0,0,256,257,5,81,0,0,257,258,3,40,20,0,258,262,5,99,0,0,
		259,261,3,2,1,0,260,259,1,0,0,0,261,264,1,0,0,0,262,260,1,0,0,0,262,263,
		1,0,0,0,263,268,1,0,0,0,264,262,1,0,0,0,265,267,3,30,15,0,266,265,1,0,
		0,0,267,270,1,0,0,0,268,266,1,0,0,0,268,269,1,0,0,0,269,272,1,0,0,0,270,
		268,1,0,0,0,271,273,3,32,16,0,272,271,1,0,0,0,272,273,1,0,0,0,273,274,
		1,0,0,0,274,275,5,76,0,0,275,276,5,123,0,0,276,27,1,0,0,0,277,280,3,44,
		22,0,278,280,3,46,23,0,279,277,1,0,0,0,279,278,1,0,0,0,280,29,1,0,0,0,
		281,282,7,5,0,0,282,283,3,40,20,0,283,287,5,99,0,0,284,286,3,2,1,0,285,
		284,1,0,0,0,286,289,1,0,0,0,287,285,1,0,0,0,287,288,1,0,0,0,288,31,1,0,
		0,0,289,287,1,0,0,0,290,291,7,6,0,0,291,295,5,99,0,0,292,294,3,2,1,0,293,
		292,1,0,0,0,294,297,1,0,0,0,295,293,1,0,0,0,295,296,1,0,0,0,296,33,1,0,
		0,0,297,295,1,0,0,0,298,299,3,50,25,0,299,300,3,36,18,0,300,302,1,0,0,
		0,301,298,1,0,0,0,302,303,1,0,0,0,303,301,1,0,0,0,303,304,1,0,0,0,304,
		35,1,0,0,0,305,310,3,38,19,0,306,307,5,79,0,0,307,309,3,38,19,0,308,306,
		1,0,0,0,309,312,1,0,0,0,310,308,1,0,0,0,310,311,1,0,0,0,311,37,1,0,0,0,
		312,310,1,0,0,0,313,314,6,19,-1,0,314,327,5,117,0,0,315,327,5,118,0,0,
		316,327,5,119,0,0,317,318,5,57,0,0,318,319,5,84,0,0,319,327,3,44,22,0,
		320,327,3,44,22,0,321,327,3,46,23,0,322,323,5,101,0,0,323,324,3,38,19,
		0,324,325,5,102,0,0,325,327,1,0,0,0,326,313,1,0,0,0,326,315,1,0,0,0,326,
		316,1,0,0,0,326,317,1,0,0,0,326,320,1,0,0,0,326,321,1,0,0,0,326,322,1,
		0,0,0,327,334,1,0,0,0,328,329,10,2,0,0,329,330,3,54,27,0,330,331,3,38,
		19,3,331,333,1,0,0,0,332,328,1,0,0,0,333,336,1,0,0,0,334,332,1,0,0,0,334,
		335,1,0,0,0,335,39,1,0,0,0,336,334,1,0,0,0,337,339,3,38,19,0,338,340,3,
		56,28,0,339,338,1,0,0,0,339,340,1,0,0,0,340,341,1,0,0,0,341,342,3,38,19,
		0,342,41,1,0,0,0,343,344,5,118,0,0,344,347,3,52,26,0,345,346,5,79,0,0,
		346,348,3,42,21,0,347,345,1,0,0,0,347,348,1,0,0,0,348,43,1,0,0,0,349,351,
		3,48,24,0,350,349,1,0,0,0,350,351,1,0,0,0,351,352,1,0,0,0,352,357,5,122,
		0,0,353,354,5,97,0,0,354,356,5,122,0,0,355,353,1,0,0,0,356,359,1,0,0,0,
		357,355,1,0,0,0,357,358,1,0,0,0,358,45,1,0,0,0,359,357,1,0,0,0,360,362,
		3,48,24,0,361,360,1,0,0,0,361,362,1,0,0,0,362,363,1,0,0,0,363,364,5,53,
		0,0,364,365,5,56,0,0,365,366,5,84,0,0,366,384,3,44,22,0,367,369,3,48,24,
		0,368,367,1,0,0,0,368,369,1,0,0,0,369,370,1,0,0,0,370,371,5,54,0,0,371,
		372,5,56,0,0,372,373,5,84,0,0,373,384,3,44,22,0,374,376,3,48,24,0,375,
		374,1,0,0,0,375,376,1,0,0,0,376,377,1,0,0,0,377,378,5,56,0,0,378,379,5,
		38,0,0,379,380,3,38,19,0,380,381,5,84,0,0,381,382,3,44,22,0,382,384,1,
		0,0,0,383,361,1,0,0,0,383,368,1,0,0,0,383,375,1,0,0,0,384,47,1,0,0,0,385,
		386,7,7,0,0,386,49,1,0,0,0,387,388,7,8,0,0,388,51,1,0,0,0,389,390,7,9,
		0,0,390,53,1,0,0,0,391,392,7,10,0,0,392,55,1,0,0,0,393,394,7,11,0,0,394,
		57,1,0,0,0,395,396,7,12,0,0,396,59,1,0,0,0,35,63,79,83,87,96,104,108,115,
		127,141,165,178,190,204,209,245,249,262,268,272,279,287,295,303,310,326,
		334,339,347,350,357,361,368,375,383
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace HereticalSolutions.StanleyScript
